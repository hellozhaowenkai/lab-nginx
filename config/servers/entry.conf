# ==================================================
# Entry
# ==================================================

# generated 2021-09-17, Mozilla Guideline v5.6, NGINX 1.17.7, OpenSSL 1.1.1d, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1d&guideline=5.6

server {
    listen  80  default_server;
    listen  [::]:80  default_server;

    location / {
        return  301  https://$host$request_uri;
    }
}

server {
    listen  443  ssl  http2;
    listen  [::]:443  ssl  http2;

    #
    # SSL/TLS options.
    #

    ssl_certificate      ssl/cert.pem;
    ssl_certificate_key  ssl/cert.key;
    ssl_session_timeout  1d;
    ssl_session_cache    shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets  off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    ssl_dhparam  ssl/dhparam.sample.pem;

    # Intermediate configuration.
    ssl_protocols              TLSv1.2 TLSv1.3;
    ssl_ciphers                ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers  off;

    # Enable HSTS. (ngx_http_headers_module is required) (63072000 seconds)
    add_header  Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling.
    ssl_stapling         on;
    ssl_stapling_verify  on;

    # Verify chain of trust of OCSP response using Root CA and Intermediate certs.
    ssl_trusted_certificate  ssl/cert.ca;

    # Replace with the IP address of your resolver.
    resolver  1.1.1.1;  # use Cloudflare DNS

    #
    # Log options.
    #

    access_log  logs/access.entry.log  main-level-0;
    error_log   logs/error.entry.log   warn;

    #
    # Entry.
    #

    location / {
        #
        # CORS options.
        #

        proxy_hide_header  Access-Control-Allow-Origin;
        proxy_hide_header  Access-Control-Allow-Credentials;
        proxy_hide_header  Access-Control-Expose-Headers;
        proxy_hide_header  Vary;

        set  $conditions_flag  "0";
        if ($http_origin ~ .*) {
            set  $conditions_flag  "${conditions_flag}1";
        }
        if ($request_method = OPTIONS) {
            set  $conditions_flag  "${conditions_flag}2";
        }
        if ($conditions_flag = "01") {
            add_header  Access-Control-Allow-Origin       $http_origin  always;
            add_header  Access-Control-Allow-Credentials  true;
            add_header  Access-Control-Expose-Headers     true;
            add_header  Vary                              Origin;
        }
        if ($conditions_flag = "012") {
            add_header  Access-Control-Allow-Origin       $http_origin  always;
            add_header  Access-Control-Allow-Credentials  true;
            add_header  Access-Control-Expose-Headers     true;
            add_header  Vary                              Origin;

            add_header  Access-Control-Max-Age            3600;
            add_header  Access-Control-Allow-Methods      $http_access_control_request_method;
            add_header  Access-Control-Allow-Headers      $http_access_control_request_headers;

            return  204;
        }

        #
        # Gateway.
        #

        proxy_pass  http://localhost:10000/;
    }

    #
    # Error page options.
    #

    # error_page  404  /404.html;

    # Redirect server error pages to the static page.
    error_page  500 502 503 504  /50x.html;
    location = /50x.html {
        root  html;
    }
}
