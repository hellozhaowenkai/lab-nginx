# ==================================================
# Host
# ==================================================

# generated 2021-09-17, Mozilla Guideline v5.6, NGINX 1.17.7, OpenSSL 1.1.1d, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1d&guideline=5.6

#
# HTTP server.
#

server {
    listen  80  default_server;
    listen  [::]:80  default_server;

    location / {
        # Redirect HTTP to HTTPS.
        return  301  https://$host$request_uri;
    }
}

#
# SSL/TLS intermediate options.
#

ssl_certificate      ssl/cert.pem;
ssl_certificate_key  ssl/cert.key;
ssl_session_timeout  1d;
ssl_session_cache    shared:MozSSL:10m;  # about 40000 sessions
ssl_session_tickets  off;

# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
ssl_dhparam  ssl/dhparam.sample.pem;

# Intermediate configuration.
ssl_protocols              TLSv1.2 TLSv1.3;
ssl_ciphers                ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers  off;

# Enable HSTS. (ngx_http_headers_module is required) (63072000 seconds)
add_header  Strict-Transport-Security "max-age=63072000" always;

# OCSP stapling.
ssl_stapling         on;
ssl_stapling_verify  on;

# Verify chain of trust of OCSP response using Root CA and Intermediate certs.
ssl_trusted_certificate  ssl/cert.ca;

# Replace with the IP address of your resolver.
resolver  1.1.1.1;  # use Cloudflare DNS

#
# Authenticated origin pulls via Cloudflare.
#

ssl_client_certificate  ssl/cloudflare.sample.crt;
ssl_verify_client       on;

#
# HTTPS server with `www` prefix.
#

server {
    listen       443  ssl  http2;
    listen       [::]:443  ssl  http2;
    server_name  ~^www\.(?<domain>.+)$;

    location / {
        # Redirect www URLs to non-www.
        return  301  https://$domain$request_uri;
    }
}

#
# HTTPS server without `www` prefix.
#

server {
    listen       443  ssl  http2;
    listen       [::]:443  ssl  http2;
    server_name  ~^(?!www\.)(?<domain>.+)$;

    #
    # Log options.
    #

    access_log  logs/access.host.log  main-level-0;
    error_log   logs/error.host.log   warn;

    #
    # Host.
    #

    location / {
        #
        # Entry.
        #

        proxy_pass  http://localhost:8888/;
    }
}
